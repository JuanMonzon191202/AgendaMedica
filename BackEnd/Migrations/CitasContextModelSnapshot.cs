// <auto-generated />
using System;
using BackEdn.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BackEnd.Migrations
{
    [DbContext(typeof(CitasContext))]
    partial class CitasContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BackEdn.Data.backendModels.Cita", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("HoraCita")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdUsuarioEspecialistaCmc")
                        .HasColumnType("int");

                    b.Property<int>("IdUsuarioPaciente")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdUsuarioEspecialistaCmc");

                    b.HasIndex("IdUsuarioPaciente");

                    b.ToTable("Citas");
                });

            modelBuilder.Entity("BackEdn.Data.backendModels.Especialidad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("NombreEspecialidad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Especialidades");
                });

            modelBuilder.Entity("BackEdn.Data.backendModels.EspecialidadEspecialista", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("EspecialidadId")
                        .HasColumnType("int");

                    b.Property<int>("IdEspecialidad")
                        .HasColumnType("int");

                    b.Property<int>("IdEspecialistaCmc")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EspecialidadId");

                    b.HasIndex("IdEspecialidad");

                    b.HasIndex("IdEspecialistaCmc");

                    b.ToTable("EspecialidadesEspecialistas");
                });

            modelBuilder.Entity("BackEdn.Data.backendModels.EspecialistaCmc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Ciudad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int");

                    b.Property<string>("NoCedula")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pais")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdUsuario");

                    b.ToTable("EspecialistasCmc");
                });

            modelBuilder.Entity("BackEdn.Data.backendModels.Paciente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Genero")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Pacientes");
                });

            modelBuilder.Entity("BackEdn.Data.backendModels.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("NombreRol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("BackEdn.Data.backendModels.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Foto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdRol")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdRol");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("BackEdn.Data.backendModels.Cita", b =>
                {
                    b.HasOne("BackEdn.Data.backendModels.EspecialistaCmc", "EspecialistaCmc")
                        .WithMany("Citas")
                        .HasForeignKey("IdUsuarioEspecialistaCmc")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BackEdn.Data.backendModels.Paciente", "Paciente")
                        .WithMany("Citas")
                        .HasForeignKey("IdUsuarioPaciente")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("EspecialistaCmc");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("BackEdn.Data.backendModels.EspecialidadEspecialista", b =>
                {
                    b.HasOne("BackEdn.Data.backendModels.Especialidad", null)
                        .WithMany("Especialistas")
                        .HasForeignKey("EspecialidadId");

                    b.HasOne("BackEdn.Data.backendModels.Especialidad", "Especialidad")
                        .WithMany()
                        .HasForeignKey("IdEspecialidad")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEdn.Data.backendModels.EspecialistaCmc", "EspecialistaCmc")
                        .WithMany("Especialidades")
                        .HasForeignKey("IdEspecialistaCmc")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Especialidad");

                    b.Navigation("EspecialistaCmc");
                });

            modelBuilder.Entity("BackEdn.Data.backendModels.EspecialistaCmc", b =>
                {
                    b.HasOne("BackEdn.Data.backendModels.Usuario", "Usuario")
                        .WithMany("EspecialistasCmc")
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("BackEdn.Data.backendModels.Paciente", b =>
                {
                    b.HasOne("BackEdn.Data.backendModels.Usuario", "Usuario")
                        .WithMany("Pacientes")
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("BackEdn.Data.backendModels.Usuario", b =>
                {
                    b.HasOne("BackEdn.Data.backendModels.Rol", "Rol")
                        .WithMany()
                        .HasForeignKey("IdRol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("BackEdn.Data.backendModels.Especialidad", b =>
                {
                    b.Navigation("Especialistas");
                });

            modelBuilder.Entity("BackEdn.Data.backendModels.EspecialistaCmc", b =>
                {
                    b.Navigation("Citas");

                    b.Navigation("Especialidades");
                });

            modelBuilder.Entity("BackEdn.Data.backendModels.Paciente", b =>
                {
                    b.Navigation("Citas");
                });

            modelBuilder.Entity("BackEdn.Data.backendModels.Usuario", b =>
                {
                    b.Navigation("EspecialistasCmc");

                    b.Navigation("Pacientes");
                });
#pragma warning restore 612, 618
        }
    }
}
